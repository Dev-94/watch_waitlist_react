{"version":3,"sources":["Hooks/InputHooks.jsx","Components/TicketForm.jsx","Pages/AddPage.jsx","Components/WatchCard.jsx","Components/DeleteButton.jsx","Components/TicketCard.jsx","Components/Chevron.jsx","Pages/ViewPage.jsx","Components/NavBar.jsx","App.js","serviceWorker.js","index.js"],"names":["useInput","initialValue","useState","value","setValue","reset","bind","onChange","event","target","NameForm","props","firstName","bindFirstName","resetFirstName","lastName","bindLastName","resetLastName","phoneNumber","bindNumber","resetNumber","email","bindEmail","resetEmail","street","bindStreet","resetStreet","city","bindCity","resetCity","state","bindState","resetState","zipCode","bindZipCode","resetZipCode","dateOrdered","bindDateOrdered","resetDateOrdered","watchOrdered","bindWatchOrdered","resetWatchOrdered","employeeResponsible","bindEmployeeResponsible","resetEmployeeResponsible","addTicketToDb","input","console","log","axios","post","handleSubmit","alert","className","onSubmit","inputFirstName","inputLastName","inputNumber","inputEmail","inputStreet","inputCity","inputState","inputZipCode","inputDateOrdered","inputWatchOrdered","inputEmployeeResponsible","preventDefault","names","number","emails","test","inputs","type","placeholder","style","marginBottom","AddPage","WatchCard","WButton","styled","button","WImg","img","WTitle","h1","color","onClick","e","setSelectedWatch","id","selectedWatch","name","src","image","alt","TCard","div","TInfo","li","TButton","TicketCard","handleFulfillmentUpdate","persist","statusUpdate","status","JSON","stringify","put","inverse","key","CardBody","first_name","last_name","zip_code","phone_number","employee_responsible","watch_ordered","Date","date_ordered","toDateString","fulfilled","outline","Chevron","height","width","xmlns","viewBox","fill","d","ViewPage","currentTab","setCurrentTab","customer","setCustomer","isTCActive","areTabsVisible","setAreTabsVisible","getTicketsFromDb","fetch","then","data","json","res","useEffect","getTicketsFromDbForSelectedWatch","filter","ticket","isActive","setIsActive","watchHeight","setWatchHeight","rotation","setRotation","watches","setWatches","getWatchesFromDb","Container","VPButton","marginLeft","float","map","item","index","maxHeight","_id","selectedIndex","onSelect","display","date_fulfilled","NavBar","NavPlace","span","NavContainer","Title","textDecoration","placeSelf","to","path","component","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.e0a00650.chunk.js","sourcesContent":["import { useState } from \"react\"\n\nexport const useInput = initialValue => {\n    const [value, setValue] = useState(initialValue)\n\n    return {\n        value, setValue, reset: () => setValue(\"\"),\n        bind: {\n            value,\n            onChange: event => { setValue(event.target.value) }\n        }\n    }\n\n}","import React, { useState } from 'react';\nimport { useInput } from '../Hooks/InputHooks'\nimport axios from 'axios'\nimport './ComponentStyling/TicketFormStyling.css'\n\nexport default function NameForm(props) {\n\n    const { value: firstName, bind: bindFirstName, reset: resetFirstName } = useInput('');\n    const { value: lastName, bind: bindLastName, reset: resetLastName } = useInput('');\n    const { value: phoneNumber, bind: bindNumber, reset: resetNumber } = useInput('');\n    const { value: email, bind: bindEmail, reset: resetEmail } = useInput('');\n\n    const { value: street, bind: bindStreet, reset: resetStreet } = useInput('');\n    const { value: city, bind: bindCity, reset: resetCity } = useInput('');\n    const { value: state, bind: bindState, reset: resetState } = useInput('');\n    const { value: zipCode, bind: bindZipCode, reset: resetZipCode } = useInput('');\n    const { value: dateOrdered, bind: bindDateOrdered, reset: resetDateOrdered } = useInput('');\n    const { value: watchOrdered, bind: bindWatchOrdered, reset: resetWatchOrdered } = useInput('');\n    const { value: employeeResponsible, bind: bindEmployeeResponsible, reset: resetEmployeeResponsible } = useInput('');\n\n\n\n    const addTicketToDb = (input) => {\n        console.log(input)\n        axios.post('http://localhost:3001/tickets/add/addTickets', {\n            input: input\n        })\n        handleSubmit()\n\n    }\n\n    const handleSubmit = () => {\n        console.log('handleSubmit is working!')\n        alert(`Submitting ${firstName} ${lastName} ${phoneNumber} ${email} ${street} ${city} ${state} ${zipCode} ${dateOrdered} ${watchOrdered} ${employeeResponsible}`);\n        resetFirstName();\n        resetLastName();\n        resetNumber();\n        resetEmail();\n        resetStreet();\n        resetCity();\n        resetState();\n        resetZipCode();\n        resetDateOrdered();\n        resetWatchOrdered();\n        resetEmployeeResponsible();\n    };\n\n    const validate = (event, inputFirstName = bindFirstName.value, inputLastName = bindLastName.value, inputNumber = bindNumber.value, inputEmail = bindEmail.value, inputStreet = bindStreet.value, inputCity = bindCity.value, inputState = bindState.value, inputZipCode = bindZipCode.value, inputDateOrdered = bindDateOrdered.value, inputWatchOrdered = bindWatchOrdered.value, inputEmployeeResponsible = bindEmployeeResponsible.value) => {\n        event.preventDefault()\n        const names = /^\\D{2,}$/;\n        const number = /^\\d{3}-\\d{3}-\\d{4}$/;\n        const emails = /[\\w-]+@([\\w-]+\\.)+[\\w-]+/;\n        if (names.test(inputFirstName) && names.test(inputLastName) && emails.test(inputEmail)) {\n            if (number.test(inputNumber)) {\n                const inputs = { inputFirstName, inputLastName, inputNumber, inputEmail, inputStreet, inputCity, inputState, inputZipCode, inputDateOrdered, inputWatchOrdered, inputEmployeeResponsible }\n                console.log(inputs) // works!\n                addTicketToDb(inputs)\n            } else {\n                alert('Please follow the 000-000-0000 format.');\n            }\n        }\n        else alert('Please input valid information.');\n    }\n\n    return (\n        <div className=\"form_containter\">\n\n            <h1>Add a Ticket</h1>\n            <hr />\n            <form className=\"ticket_form\" onSubmit={validate}>\n\n                <label>First Name: <input type=\"text\" placeholder=\"John\" {...bindFirstName} /></label>\n                <br />\n                <br />\n                <label>Last Name: <input type=\"text\" placeholder=\"Doe\" {...bindLastName} /></label>\n                <br />\n                <br />\n                <label>Email: <input type=\"email\" placeholder=\"me@email.com\" {...bindEmail} /></label>\n                <br />\n                <br />\n                <label>Phone Number: <input type=\"tel\" placeholder=\"000-000-0000\" {...bindNumber} /></label>\n                <br />\n                <br />\n                <label>Street:<input type=\"text\" placeholder=\"2211 Lawnmont Ave\" {...bindStreet} /></label>\n                <br />\n                <br />\n                <label>City:<input type=\"text\" placeholder=\"Austin\" {...bindCity} /></label>\n                <br />\n                <br />\n                <label>State:<input type=\"text\" placeholder=\"Texas\" {...bindState} /></label>\n                <br />\n                <br />\n                <label>Zip Code:<input type=\"text\" placeholder=\"75034\" {...bindZipCode} /></label>\n                <br />\n                <br />\n                Select a watch: <select value={'select a watch'} {...bindWatchOrdered}>\n                    <option value=\" \"> </option>\n                    <option value=\"Sky Dweller\">Sky Dweller</option>\n                    <option value=\"Daytona\">Daytona</option>\n                    <option value=\"Milgauss\">Milgauss</option>\n                    <option value=\"Datejust\">Datejust</option>\n                    <option value=\"Day-Date\">Day-Date</option>\n                    <option value=\"Cellini\">Cellini</option>\n                    <option value=\"Oyster Perpetual\">Oyster Perpetual</option>\n                    <option value=\"Sea Dweller\">Sea Dweller</option>\n                    <option value=\"Submariner\">Submariner</option>\n                </select>\n                <br />\n                <br />\n                <label>Date Ordered:<input type=\"date\" placeholder=\"09/21/1994\" {...bindDateOrdered} /></label>\n                <br />\n                <br />\n                Which employee is responsible? <select value={'which employee is responsible?'} {...bindEmployeeResponsible}>\n                    <option value=\" \"> </option>\n                    <option value=\"John Smith\">John Smith</option>\n                    <option value=\"Joana Jones\">Joana Jones</option>\n                    <option value=\"Mike Johnson\">Mike Johnson</option>\n                    <option value=\"Dave Perry\">Dave Perry</option>\n                    <option value=\"Doug Mortensen\">Doug Mortensen</option>\n                    <option value=\"Selina Perez\">Selina Perez</option>\n                    <option value=\"Oscar Scott\">Oscar Scott</option>\n                    <option value=\"Bella Sorensen\">Bella Sorensen</option>\n                </select>\n                <br />\n                <br />\n                <input style={{ marginBottom: '2em' }} type=\"submit\" value=\"Submit\" />\n            </form>\n\n        </div>\n\n    )\n}","import React from 'react'\nimport TicketForm from '../Components/TicketForm'\n\nconst AddPage = () => {\n\n    return (\n        <div>\n            <TicketForm />\n        </div>\n    )\n\n}\n\nexport default AddPage","import React from 'react'\nimport styled from 'styled-components'\nimport { Card, CardImg, CardImgOverlay, Button } from 'reactstrap';\n\n\nconst WatchCard = (props) => {\n\n\n\n    const WButton = styled.button`\n        height: 14em;\n        width: 12em;\n        box-shadow:  5px 5px 1px rgba(4, 4, 4, .9);\n        border: rgba(26, 119, 76) 1px solid; /* rolex green */\n        border-radius: 5px;\n        background-color: rgb(255, 255, 255);  \n        margin: 2em 0;\n\n\n        \n\n        &:hover{\n        box-shadow: inset 2px 2px 2px rgba(4, 4, 4, .9);\n        background-color: rgba(26, 119, 76);\n        \n        }\n\n\n        `\n\n    const WImg = styled.img`\n        height: 8em;\n        width: 6em;\n        border-radius: 2px;\n        \n    \n        `\n\n    const WTitle = styled.h1`\n        font-size: larger;\n        font-weight: bolder;\n        color: rgba(173, 135, 2, .6);\n        text-shadow: 1px 1px 1px rgba(255,255,255,.9);\n\n        `\n\n\n\n    const handleClick = e => {\n        props.setSelectedWatch(e.target.id)\n        console.log('WC, selectedWatch: ' + props.selectedWatch)\n    }\n\n\n    return (\n\n        <WButton color='success' onClick={handleClick} id={props.name} type=\"submit\" >\n            <WImg src={props.image} alt={props.name} id={props.name} />\n\n            <WTitle id={props.name} >{props.name}</WTitle>\n        </WButton>\n    )\n}\n\nexport default WatchCard","import styled from 'styled-components'\n\nconst DeleteButton = styled.button`\n    border-radius: 50px;\n    max-width: 50px;\n    max-height: 50px;\n    color: rgba(4,4,4,.5);\n    background-color: inherit;\n    float: right;\n\n`\n\nexport default DeleteButton","import React from 'react'\nimport { CardBody } from 'reactstrap';\nimport DeleteButton from './DeleteButton'\nimport styled from 'styled-components'\nimport axios from 'axios'\n\n\n// text shadow, hover\n\nconst TCard = styled.div`\n    max-width: 29em;\n    max-height: 29em;\n    background-color: rgba(255, 255, 255, .5);  \n    border-radius: 5px;\n    border: rgba(173, 135, 2, .9) solid 1px; /* dark goldenrod */\n    margin-bottom: 2em;\n    padding-left: 1em;\n    text-shadow: 1px 1px 1px lightgrey;\n    box-shadow:  5px 5px 1px rgba(4, 4, 4, .2);\n\n\n    &:hover{\n    box-shadow: inset 2px 2px 2px rgba(4, 4, 4, .9);\n    background-color: rgb(255, 255, 255);  \n    }\n\n\n    `\nconst TInfo = styled.li`\n    list-style-type: none;\n    color: rgba(173, 135, 2, .9); /* dark goldenrod */\n`\n\nconst TButton = styled.button`\n    color: rgba(33, 118, 255, .5); /* Blue Crayola */\n    border-radius: 10px;\n    border: rgba(33, 118, 255, .5) solid 1px;\n    margin-top: 1em;\n    margin-right: 1em;\n    background-color:white;\n\n    &:hover {\n    background-color: rgba(33, 118, 255, .9); \n    color: white\n    }\n`\n\nconst TicketCard = (props) => {\n\n\n    const handleFulfillmentUpdate = (event) => {\n        console.log('handleFulfillmentUpdate is firing')\n        event.persist()\n        const statusUpdate = { id: event.target.id, status: event.target.value }\n        console.log('statusUpdate: ' + JSON.stringify(statusUpdate))\n        axios.put('http://localhost:3001/tickets/updateFulfillment', {\n            statusUpdate: statusUpdate\n        })\n\n    }\n\n    const deleteTicketFromDB = (event) => {\n        event.persist()\n        console.log('deleteTicketFromDB is firing')\n        // const ticketToDelete = { id: event.target.value }\n        // console.log(ticketToDelete)\n        axios.delete('http://localhost:3001/tickets/deleteTicket/:id', {\n            id: event.target.value\n        })\n\n\n    }\n\n\n    return (\n        <TCard\n            id=\"TicketCard\" inverse key={props.id} >\n\n            <CardBody >\n                {/* <DeleteButton onClick={deleteTicketFromDB} value={props.id}>X</DeleteButton> */}\n                <TInfo>Name: {props.first_name} {props.last_name}</TInfo>\n                <TInfo>Address: {props.street}\n                    <br />\n                    {props.city}, {props.state} {props.zip_code} </TInfo>\n                <TInfo>Contact Info: {props.phone_number} | {props.email}</TInfo>\n                <hr />\n                <TInfo>Employee Responsible: {props.employee_responsible}</TInfo>\n                <TInfo>Watch Ordered: {props.watch_ordered}</TInfo>\n                <TInfo>Date of Order: {new Date(props.date_ordered).toDateString()}</TInfo>\n                {/* <TInfo>Fulfillment Status: {(props.fulfilled == true) ? 'Fulfilled' : 'Pending'}</TInfo> */}\n                <TInfo>Fulfillment Status: {props.fulfilled}</TInfo>\n                {/* <TInfo>Date Fulfilled: {(props.fulfilled == false) ? 'Not Yet Fulfilled' : new Date(props.date_fulfilled).toDateString()}</TInfo> */}\n                <TInfo>Date Fulfilled: {props.fulfilled}</TInfo>\n\n                <TButton outline color=\"primary\" id={props.id} value={true} onClick={handleFulfillmentUpdate}>Fulfilled</TButton>\n                <TButton outline color=\"secondary\" id={props.id} value={false} onClick={handleFulfillmentUpdate}>Pending</TButton>\n\n            </CardBody>\n        </TCard>\n    )\n\n}\n\nexport default TicketCard;","import React from 'react'\n\nconst Chevron = (props) => {\n\n    return (\n\n        <svg\n            className={props.className}\n            height={props.height}\n            width={props.width}\n            // aria-hidden=\"true\"\n            // focusable=\"false\"\n            // data-prefix=\"fas\"\n            // data-icon=\"chevron-right\"\n            // class=\"svg-inline--fa fa-chevron-right fa-w-10\"\n            // role=\"img\"\n            xmlns=\"http://www.w3.org/2000/svg\"\n            viewBox=\"0 0 320 512\" >\n            <path\n                fill={props.fill}\n                d=\"M285.476 272.971L91.132 467.314c-9.373 9.373-24.569 9.373-33.941 0l-22.667-22.667c-9.357-9.357-9.375-24.522-.04-33.901L188.505 256 34.484 101.255c-9.335-9.379-9.317-24.544.04-33.901l22.667-22.667c9.373-9.373 24.569-9.373 33.941 0L285.475 239.03c9.373 9.372 9.373 24.568.001 33.941z\">\n\n            </path>\n        </svg >\n\n    )\n\n}\n\nexport default Chevron","import React, { useState, useEffect } from 'react'\nimport WatchCard from '../Components/WatchCard'\nimport { Tab, Tabs, TabList, TabPanel } from 'react-tabs';\nimport { Button } from 'reactstrap';\nimport 'react-tabs/style/react-tabs.css';\nimport './PagesStyling/ViewPageStyling.css'\nimport TicketCard from '../Components/TicketCard';\nimport Chevron from '../Components/Chevron';\nimport styled from 'styled-components'\n\n\n// TODO: convert tabs in to radio buttons to filter contents, tabs currently get tickets for all watches\n// TODO: get req.body to pick up idToDelete\n\nconst ViewPage = () => {\n    // tabs\n    const [currentTab, setCurrentTab] = useState(1)\n    const handleCurrentTab = (index) => setCurrentTab(index)\n\n\n\n    // gets tickets from db when 'View Search Results' is clicked\n    const [customer, setCustomer] = useState([])\n\n    const [isTCActive, setIsTCActive] = useState('active')\n\n\n    const [areTabsVisible, setAreTabsVisible] = useState('none')\n\n    const getTicketsFromDb = () => {\n        if (isTCActive === 'active') {\n            setAreTabsVisible('inline')\n            fetch('http://localhost:3001/tickets/getTickets')\n                .then(data => data.json())\n                .then(res => setCustomer(res.data))\n        }\n\n    }\n\n    useEffect(() =>\n        (selectedWatch !== '') ? getTicketsFromDbForSelectedWatch() : getTicketsFromDb()\n        , [currentTab])\n    // useEffect(() => getTicketsFromDb(), [currentTab])\n\n\n    const getTicketsFromDbForSelectedWatch = () => {\n        if (isTCActive === 'active') {\n            setAreTabsVisible('inline')\n            fetch('http://localhost:3001/tickets/getTickets')\n                .then(data => data.json())\n                .then(res => setCustomer(res.data.filter(ticket => ticket.watch_ordered == selectedWatch)))\n        }\n\n    }\n\n\n\n\n    // collapsible WC component\n    const [isActive, setIsActive] = useState('')\n    const [watchHeight, setWatchHeight] = useState('0px')\n    const [rotation, setRotation] = useState('accordion_icon')\n\n    const toggleAccordion = () => {\n        getWatchesFromDb()\n        setIsActive(isActive === '' ? 'active' : '')\n        setWatchHeight(isActive === 'active' ? '0px' : '1000px')\n        setRotation(isActive === 'active' ? 'accordion_icon' : 'accordion_icon rotate')\n\n    }\n\n    const [watches, setWatches] = useState([]) // displays watches\n\n    const getWatchesFromDb = () => {\n        if (rotation === 'accordion_icon') {\n            fetch('http://localhost:3001/watches/getWatches')\n                .then(data => data.json())\n                .then(res => setWatches(res.data))\n        }\n    }\n\n    const [selectedWatch, setSelectedWatch] = useState('') // selects watches\n\n\n    const Container = styled.div`\n        display: grid;\n        grid-template-columns: repeat(5, 14em);\n        grid-template-rows: auto\n\n    `\n\n    const VPButton = styled.button`\n        text-shadow: 1px 1px 1px rgba(255,255,255,.9);\n        background-color: rgba(173, 135, 2, .1);\n        border: black 1px solid;\n        border-radius: 7px;\n        font-weight: 100px;\n        &:hover{\n            box-shadow: inset 2px 2px 1px rgba(4, 4, 4, .9);\n\n        }\n\n    `\n\n    return (\n        <div>\n            <VPButton style={{ marginLeft: '1em', float: 'right' }} onClick={getTicketsFromDb}>\n                Select All Watches</VPButton>\n            {/* <br />\n            <br /> */}\n            <VPButton className={`accordion ${isActive}`} style={{ height: '60px', width: '200px' }} onClick={toggleAccordion}>\n                <span>Select Watch</span>\n                <Chevron className={`${rotation}`} width={10} fill={\"#777\"} />\n            </VPButton>\n            <VPButton style={{ float: 'right' }} onClick={getTicketsFromDbForSelectedWatch}>  {selectedWatch ? 'View Results For ' + selectedWatch : 'Click here once you have selected a watch'}</VPButton>\n            <Container>\n                {(isActive === 'active') ?\n                    watches.map((item, index) => {\n                        return (\n\n                            <div style={{ maxHeight: `${watchHeight}` }} key={index}>\n                                <WatchCard name={item.name} image={item.image} selectedWatch={selectedWatch} setSelectedWatch={setSelectedWatch} id={item._id} />\n                            </div>\n\n                        )\n                    })\n                    :\n                    <div>\n                    </div>\n                }\n            </Container>\n\n            <div className=\"TicketView\">\n\n\n\n                {/* ///// tabs begin ///// */}\n                <hr />\n                <Tabs selectedIndex={currentTab} onSelect={handleCurrentTab} style={{ display: `${areTabsVisible}` }}>\n                    <TabList>\n                        <Tab>All</Tab>\n                        <Tab>Pending</Tab>\n                        <Tab>Fulfilled</Tab>\n                    </TabList>\n\n                    <TabPanel>\n                        <h2>All Tickets</h2>\n\n\n                        {(isTCActive === 'active') ?\n                            customer.map((item, index) => {\n                                return (\n                                    <div key={index}>\n                                        <TicketCard\n                                            id={item._id}\n                                            // name to left of assigment is what name must be in child\n                                            first_name={item.first_name}\n                                            last_name={item.last_name}\n                                            street={item.street}\n                                            city={item.city}\n                                            state={item.state}\n                                            zip_code={item.zip_code}\n                                            phone_number={item.phone_number}\n                                            email={item.email}\n                                            employee_responsible={item.employee_responsible}\n                                            watch_ordered={item.watch_ordered}\n                                            date_ordered={item.date_ordered}\n                                            fulfilled={JSON.stringify(item.fulfilled)}\n                                            date_fulfilled={item.date_fulfilled}\n\n                                        />\n                                    </div>\n                                )\n                            })\n                            :\n                            <div>No tickets fit the current criteria.</div>\n                        }\n                    </TabPanel>\n                    <TabPanel>\n                        <h2>Pending Tickets</h2>\n                        {(isTCActive === 'active') ?\n                            customer.filter(ticket => ticket.fulfilled === false).map((item, index) => {\n                                return (\n                                    <div key={index}>\n                                        <TicketCard\n                                            id={item._id}\n                                            // name to left of assigment is what name must be in child\n                                            first_name={item.first_name}\n                                            last_name={item.last_name}\n                                            street={item.street}\n                                            city={item.city}\n                                            state={item.state}\n                                            zip_code={item.zip_code}\n                                            phone_number={item.phone_number}\n                                            email={item.email}\n                                            employee_responsible={item.employee_responsible}\n                                            watch_ordered={item.watch_ordered}\n                                            date_ordered={item.date_ordered}\n                                            fulfilled={item.fulfilled}\n                                            date_fulfilled={item.date_fulfilled}\n\n                                        />\n                                    </div>)\n                            })\n                            :\n                            <div>No tickets fit the current criteria.</div>\n                        }\n                    </TabPanel>\n                    <TabPanel>\n                        <h2>Fulfilled Tickets</h2>\n                        {(isTCActive === 'active') ?\n                            customer.filter(ticket => ticket.fulfilled === true).map((item, index) => {\n                                return (\n                                    <div key={index}>\n                                        <TicketCard\n                                            id={item._id}\n                                            // name to left of assigment is what name must be in child\n                                            first_name={item.first_name}\n                                            last_name={item.last_name}\n                                            street={item.street}\n                                            city={item.city}\n                                            state={item.state}\n                                            zip_code={item.zip_code}\n                                            phone_number={item.phone_number}\n                                            email={item.email}\n                                            employee_responsible={item.employee_responsible}\n                                            watch_ordered={item.watch_ordered}\n                                            date_ordered={item.date_ordered}\n                                            fulfilled={item.fulfilled}\n                                            date_fulfilled={item.date_fulfilled}\n\n                                        />\n                                    </div>)\n                            })\n                            :\n                            <div>No tickets fit the current criteria.</div>\n                        }\n                    </TabPanel>\n                </Tabs>\n\n            </div>\n\n        </div >\n    )\n\n}\n\nexport default ViewPage","import React from 'react'\nimport {\n    BrowserRouter as Router,\n    Switch,\n    Route,\n    Link\n} from \"react-router-dom\";\nimport AddPage from '../Pages/AddPage'\nimport ViewPage from '../Pages/ViewPage'\nimport ShowPage from '../Pages/ShowPage'\nimport styled from 'styled-components'\n\nconst NavBar = () => {\n\n    const NavPlace = styled.span`\n        border: rgba(173, 135, 2, .1) solid 2px;\n        border-radius: 5px;\n        background-color: rgba(173, 135, 2, .1);\n        font-size: 24px;\n        justify-self: stretch; \n        box-shadow:  2px 2px 1px rgba(4, 4, 4, .1);\n        place-self:center;\n        text-shadow: 2px 2px 2px white;\n\n        \n        &:hover{\n            /* background-color: rgba(33, 118, 255, .4); */\n            border: rgba(33, 118, 255, .1) solid 1px;            \n            text-shadow: 2px 2px 2px white;\n            box-shadow: inset 3px 3px 2px rgba(4, 4, 4, .9);\n\n\n        }\n    `\n\n    const NavContainer = styled.div`\n        display: grid;\n        grid-template-rows: repeat(3, 60px);\n        height: 3em;\n        margin-bottom: 12em;\n        padding-top: 1em;\n        \n    `\n    const Title = styled.h1`\n        font-size: 50px;\n        place-self: center;        /* box-shadow: 2px 2px 1px rgba(4, 4, 4, .1); */\n        text-shadow: 2px 2px 2px lightgrey;\n        color: rgba(4, 4, 4, .6);\n        padding: 2px;\n        font-family: 'Varela Round', sans-serif;\n        font-family: 'Roboto Slab', serif;\n\n\n    `\n\n    return (\n        <Router>\n            <div>\n                <nav>\n                    <NavContainer>\n                        <Title>Watch Waitlist</Title>\n\n                        <NavPlace>\n                            <Link style={{ color: 'rgba(4, 4, 4, .9)', textDecoration: 'none', placeSelf: 'center' }} to=\"/\">View Tickets</Link>\n                        </NavPlace>\n                        <NavPlace>\n                            <Link style={{ color: 'rgba(4, 4, 4, .9)', textDecoration: 'none', }} to=\"/tickets/add\">Add Ticket</Link>\n                        </NavPlace>\n                        {/* <li>\n                            <Link to=\"/tickets/show/:id\"> Show Ticket </Link>\n                        </li> */}\n                    </NavContainer>\n                    <hr />\n                </nav>\n\n                <Switch>\n                    <Route path=\"/tickets/add\" component={AddPage}>\n                    </Route>\n                    {/* <Route path=\"/tickets/show/:id\" component={ShowPage}>\n                    </Route> */}\n                    <Route path=\"/\" component={ViewPage}>\n                    </Route>\n                </Switch>\n            </div>\n        </Router >\n    );\n\n}\n\n\n\nexport default NavBar\n\n","import React from 'react'\nimport NavBar from './Components/NavBar'\nimport styled from 'styled-components'\n\nconst App = () => {\n\n  return (\n    <div>\n      <NavBar />\n    </div>\n  )\n\n\n}\n\nexport default App","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport './index.css'\nimport 'bootstrap/dist/css/bootstrap.css';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}